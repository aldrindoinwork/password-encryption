{"version":3,"sources":["utils/Encryption.ts","utils/Decryption.ts","pages/Password.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Encryption","token","text","a","encryptedPassword","AES","encrypt","toString","CryptoJS","require","Decryption","bytes","decrypt","decrypted","enc","Utf8","Password","useState","setEncryptedPassword","decryptedPassword","setDecryptedPassword","onFinish","values","password","rawPassword","style","margin","width","paddingTop","name","initialValues","remember","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","type","htmlType","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+aAOeA,EALC,uCAAG,WAAOC,EAAeC,GAAtB,eAAAC,EAAA,6DACXC,EAAoBC,IAAIC,QAAQJ,EAAMD,GAAOM,WADlC,kBAEVH,GAFU,2CAAH,wDCFZI,EAAWC,EAAQ,KASRC,EANC,uCAAG,WAAOT,EAAeC,GAAtB,iBAAAC,EAAA,6DACXQ,EAASH,EAASH,IAAIO,QAAQV,EAAMD,GACtCY,EAAYF,EAAMJ,SAASC,EAASM,IAAIC,MAF3B,kBAGVF,GAHU,2CAAH,wDC0CDG,EAxCE,WAAO,IAAD,EAC6BC,mBAAS,IADtC,mBACdb,EADc,KACKc,EADL,OAE6BD,mBAAS,IAFtC,mBAEdE,EAFc,KAEKC,EAFL,KAGfC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAnB,EAAA,sEACQH,EAAWsB,EAAOrB,MAAOqB,EAAOC,UADxC,cACTA,EADS,gBAEWb,EAAWY,EAAOrB,MAAOsB,GAFpC,OAETC,EAFS,OAGfN,EAAqBK,GACrBH,EAAqBI,GAJN,2CAAH,sDAWd,OACE,yBACEC,MAAO,CACLC,OAAQ,OACRC,MAAO,MACPC,WAAY,KAEd,kBAAC,IAAD,CAAMC,KAAK,QAAQC,cAAe,CAAEC,UAAU,GAAQV,SAAUA,EAAUW,eAXvD,SAACC,GACtBC,QAAQC,IAAI,UAAWF,KAWnB,kBAAC,IAAKG,KAAN,CAAWC,MAAM,gBAAgBR,KAAK,QAAQS,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,sCAC/E,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,CAAWC,MAAM,WAAWR,KAAK,WAAWS,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAC7E,kBAAC,IAAMxB,SAAP,OAEDZ,GAAqB,kDAAwBA,GAC7Ce,GAAqB,kDAAwBA,GAC9C,kBAAC,IAAKiB,KAAN,KACE,kBAAC,IAAD,CAAQK,KAAK,UAAUC,SAAS,UAAhC,cCtBKC,EARH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMtB,c","file":"static/js/main.f49a503c.chunk.js","sourcesContent":["import AES from \"crypto-js/aes\";\n\nconst Encryption = async (token: string, text: string) => {\n  const encryptedPassword = AES.encrypt(text, token).toString();\n  return encryptedPassword;\n};\n\nexport default Encryption\n","var CryptoJS = require(\"crypto-js\");\n \n\nconst Decryption = async (token: string, text: string) => {\n  const bytes  = CryptoJS.AES.decrypt(text, token);\nconst decrypted = bytes.toString(CryptoJS.enc.Utf8);\n  return decrypted;\n};\n\nexport default Decryption","import { Button, Form, Input } from \"antd\";\nimport React, { useState } from \"react\";\n\nimport { Decryption, Encryption } from \"../utils\";\n\nconst Password = () => {\n  const [encryptedPassword, setEncryptedPassword] = useState(\"\");\n  const [decryptedPassword, setDecryptedPassword] = useState(\"\");\n  const onFinish = async (values: any) => {\n    const password = await Encryption(values.token, values.password);\n    const rawPassword = await Decryption(values.token, password);\n    setEncryptedPassword(password);\n    setDecryptedPassword(rawPassword);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <div\n      style={{\n        margin: \"auto\",\n        width: \"50%\",\n        paddingTop: 80,\n      }}>\n      <Form name=\"basic\" initialValues={{ remember: true }} onFinish={onFinish} onFinishFailed={onFinishFailed}>\n        <Form.Item label=\"Session Token\" name=\"token\" rules={[{ required: true, message: \"Please input your session token!\" }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Password\" name=\"password\" rules={[{ required: true, message: \"Please input your password!\" }]}>\n          <Input.Password />\n        </Form.Item>\n        {encryptedPassword && <p>Encrypted Password: {encryptedPassword}</p>}\n        {decryptedPassword && <p>Decrypted Password: {decryptedPassword}</p>}\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default Password;\n","import \"./App.css\";\n\nimport React from \"react\";\n\nimport { Password } from \"./pages\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Password />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}